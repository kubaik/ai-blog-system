name: AI Blog Automation

on:
  schedule:
    - cron: '0 5 * * *'   # 08:00 EAT (UTC+3)
    - cron: '0 7 * * *'   # 10:00 EAT
    - cron: '0 9 * * *'   # 12:00 EAT
    - cron: '0 11 * * *'  # 14:00 EAT
    - cron: '0 13 * * *'  # 16:00 EAT
    - cron: '0 15 * * *'  # 18:00 EAT
    - cron: '0 17 * * *'  # 20:00 
    - cron: '0 19 * * *'  # 22:00 



  workflow_dispatch:
    inputs:
      force_cleanup:
        description: 'Force cleanup of posts'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'blog_system.py'
      - 'config.yaml'
      - 'requirements.txt'
      - '.github/workflows/blog-automation.yml'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Pull latest changes
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git pull origin main --rebase
        
    - name: Verify OpenAI API Key
      run: |
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "WARNING: OPENAI_API_KEY secret is not set - will use fallback content generation"
        else
          echo "SUCCESS: OpenAI API key is available"
        fi

    - name: Initialize config if needed
      run: |
        if [ ! -f "config.yaml" ]; then
          echo "Creating initial config.yaml..."
          python blog_system.py init
        else
          echo "SUCCESS: Config file exists"
        fi

    - name: Run cleanup if needed
      run: |
        echo "Checking for posts that need cleanup..."
        if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
          echo "Force cleanup requested..."
          python blog_system.py cleanup
        else
          echo "Running debug mode (includes automatic cleanup)..."
          python blog_system.py debug
        fi

    - name: Generate new blog content
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Starting blog content generation..."
        
        # Try to generate new content, but don't fail if it doesn't work
        if python blog_system.py auto; then
          echo "SUCCESS: New content generated successfully"
        else
          echo "WARNING: Content generation failed, rebuilding existing content..."
          python blog_system.py build
        fi

    - name: Verify generated content
      run: |
        echo "Checking generated content..."
        echo "Contents of docs directory:"
        ls -la docs/ || echo "ERROR: docs directory not found"
        
        if [ -f "docs/index.html" ]; then
          echo "SUCCESS: index.html exists ($(wc -c < docs/index.html) bytes)"
          
          # Count posts
          post_count=$(find docs -name "post.json" | wc -l)
          echo "Found $post_count blog posts"
          
          # List all posts
          echo "Blog posts:"
          for post_dir in docs/*/; do
            if [ -f "$post_dir/post.json" ]; then
              title=$(python -c "import json; print(json.load(open('$post_dir/post.json'))['title'])" 2>/dev/null || echo "Unknown")
              echo "  - $(basename "$post_dir"): $title"
            fi
          done
        else
          echo "ERROR: No index.html generated!"
          echo "Attempting emergency rebuild..."
          python blog_system.py build
          
          if [ ! -f "docs/index.html" ]; then
            echo "ERROR: Emergency rebuild failed"
            exit 1
          fi
        fi
    
    - name: Commit changes before deployment
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add all changes
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "Committing changes..."
          
          # Create a detailed commit message
          post_count=$(find docs -name "post.json" | wc -l)
          git commit -m "Auto-generated blog content - $(date '+%Y-%m-%d %H:%M:%S') - $post_count posts"
          git push origin main
          echo "SUCCESS: Changes pushed successfully"
        fi

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Deployment Summary
      run: |
        echo "## Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        post_count=$(find docs -name "post.json" | wc -l)
        echo "**Statistics**:" >> $GITHUB_STEP_SUMMARY
        echo "- Total posts: $post_count" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow run: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Recent Posts**:" >> $GITHUB_STEP_SUMMARY
        for post_dir in docs/*/; do
          if [ -f "$post_dir/post.json" ]; then
            title=$(python -c "import json; print(json.load(open('$post_dir/post.json'))['title'])" 2>/dev/null || echo "Unknown")
            slug=$(basename "$post_dir")
            echo "- [$title](${{ steps.deployment.outputs.page_url }}/$slug/)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo ""
        echo "Site deployed to: ${{ steps.deployment.outputs.page_url }}"